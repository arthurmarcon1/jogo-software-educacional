document.addEventListener('DOMContentLoaded', () => {
    // Sistema da Pir√¢mide Alimentar
    const setupPyramid = () => {
        const pyramidLevels = document.querySelectorAll('.pyramid-level');
        const foodExamples = document.getElementById('foodExamples');
        const levelTitle = document.getElementById('levelTitle');
        const levelContent = document.getElementById('levelContent');
        const foodIcons = document.getElementById('foodIcons');
        
        // Dados para cada n√≠vel da pir√¢mide com emojis
        const pyramidData = {
            1: {
                title: "üåæ Gr√£os e Cereais",
                description: "Formam a base da pir√¢mide e devem ser consumidos em maior quantidade. S√£o fonte de carboidratos complexos, fibras, vitaminas do complexo B e minerais.",
                examples: [
                    {name: "Arroz Integral", emoji: "üçö"},
                    {name: "P√£o Integral", emoji: "üçû"},
                    {name: "Aveia", emoji: "ü•£"},
                    {name: "Quinoa", emoji: "üåæ"},
                    {name: "Macarr√£o Integral", emoji: "üçù"}
                ],
                servings: "6-11 por√ß√µes di√°rias"
            },
            2: {
                title: "üçé Frutas e Vegetais",
                description: "Ricos em vitaminas, minerais, fibras e antioxidantes. Consuma variedade de cores para obter diferentes nutrientes.",
                examples: [
                    {name: "Ma√ß√£", emoji: "üçè"},
                    {name: "Br√≥colis", emoji: "ü•¶"},
                    {name: "Cenoura", emoji: "ü•ï"},
                    {name: "Banana", emoji: "üçå"},
                    {name: "Tomate", emoji: "üçÖ"}
                ],
                servings: "3-5 por√ß√µes de vegetais e 2-4 de frutas"
            },
            3: {
                title: "üçó Prote√≠nas",
                description: "Essenciais para constru√ß√£o e reparo dos tecidos. Inclua fontes magras e varie entre animal e vegetal.",
                examples: [
                    {name: "Frango", emoji: "üçó"},
                    {name: "Feij√£o", emoji: "ü´ò"},
                    {name: "Ovos", emoji: "ü•ö"},
                    {name: "Peixe", emoji: "üêü"},
                    {name: "Nozes", emoji: "ü•ú"}
                ],
                servings: "2-3 por√ß√µes di√°rias"
            },
            4: {
                title: "ü•õ L√°cteos",
                description: "Importantes para sa√∫de √≥ssea por fornecerem c√°lcio. Opte por vers√µes com baixo teor de gordura.",
                examples: [
                    {name: "Leite", emoji: "ü•õ"},
                    {name: "Queijo", emoji: "üßÄ"},
                    {name: "Iogurte", emoji: "üç∂"},
                    {name: "Coalhada", emoji: "ü´ô"},
                    {name: "Requeij√£o", emoji: "üßà"}
                ],
                servings: "2-3 por√ß√µes di√°rias"
            },
            5: {
                title: "ü´í Gorduras e √ìleos",
                description: "Necess√°rios em pequenas quantidades. Prefira fontes de gorduras insaturadas como azeite, abacate e oleaginosas.",
                examples: [
                    {name: "Azeite", emoji: "ü´í"},
                    {name: "Abacate", emoji: "ü•ë"},
                    {name: "Nozes", emoji: "üå∞"},
                    {name: "Salm√£o", emoji: "üêü"},
                    {name: "Sementes", emoji: "üå±"}
                ],
                servings: "Use com modera√ß√£o"
            },
            6: {
                title: "üç¨ Doces e A√ß√∫cares",
                description: "Devem ser consumidos ocasionalmente. Alto teor cal√≥rico com baixo valor nutricional.",
                examples: [
                    {name: "Chocolate", emoji: "üç´"},
                    {name: "Biscoitos", emoji: "üç™"},
                    {name: "Bolo", emoji: "üç∞"},
                    {name: "Sorvete", emoji: "üç¶"},
                    {name: "Bala", emoji: "üç≠"}
                ],
                servings: "Ocasionalmente"
            }
        };
        
        pyramidLevels.forEach(level => {
            level.addEventListener('click', function() {
                const levelNum = this.getAttribute('data-level');
                const data = pyramidData[levelNum];
                
                levelTitle.textContent = data.title;
                levelContent.innerHTML = `
                    <p>${data.description}</p>
                    <p><strong>Por√ß√µes recomendadas:</strong> ${data.servings}</p>
                `;
                
                foodIcons.innerHTML = '';
                data.examples.forEach(food => {
                    const foodIcon = document.createElement('div');
                    foodIcon.className = 'food-icon';
                    foodIcon.innerHTML = `
                        <div class="food-emoji">${food.emoji}</div>
                        <span>${food.name}</span>
                    `;
                    foodIcons.appendChild(foodIcon);
                });
                
                foodExamples.classList.add('active');
            });
        });
        
        // Mostra o primeiro n√≠vel por padr√£o
        pyramidLevels[0].click();
    };

    const gameRules = `
    üèÜ REGRAS DO JOGO üèÜ

    1. INTERA√á√ÉO COM O CLIENTE:
    - Cada cliente chegar√° com um pedido espec√≠fico
    - Pode ser:
        * Uma restri√ß√£o alimentar (sem gl√∫ten, sem lactose, etc.)
        * Um objetivo nutricional (emagrecimento, ganho muscular)
        * Uma prefer√™ncia diet√©tica (vegano, low-carb, etc.)

    2. MONTAGEM DO PRATO:
    - Voc√™ ver√° uma sele√ß√£o de ingredientes dispon√≠veis
    - Deve combinar os ingredientes corretamente para atender ao pedido
    - Alguns ingredientes podem ser incompat√≠veis com certas restri√ß√µes

    3. PONTUA√á√ÉO:
    - Acerto perfeito: 100 pontos (todos os crit√©rios atendidos)
    - Acerto parcial: 50 pontos (alguns crit√©rios atendidos)
    - Erro: 0 pontos (n√£o atendeu ao pedido)

    4. N√çVEIS DE DIFICULDADE:
    - Iniciante: 3-4 ingredientes, 1 restri√ß√£o
    - Intermedi√°rio: 5-6 ingredientes, 2 restri√ß√µes
    - Avan√ßado: 7+ ingredientes, m√∫ltiplas restri√ß√µes

    5. B√îNUS:
    - Combina√ß√µes criativas podem render pontos extras
    - Sequ√™ncias de acertos d√£o multiplicadores

    DICA: Preste aten√ß√£o nas informa√ß√µes nutricionais dos ingredientes e nas necessidades do cliente!
    `;

    // Event Listener para o bot√£o de regras
    document.getElementById('rulesBtn')?.addEventListener('click', () => {
        // Usando SweetAlert2 para um popup mais bonito (opcional)
        if (typeof Swal !== 'undefined') {
            Swal.fire({
                title: 'Regras do Jogo',
                html: gameRules.replace(/\n/g, '<br>'),
                icon: 'info',
                background: 'rgba(0, 0, 0, 0.8)',
                backdrop: 'rgba(255, 255, 255, 0.1)',
                confirmButtonColor: '#88d498',
                customClass: {
                    popup: 'glass-popup'
                }
            });
        } else {
            // Fallback para o prompt padr√£o se SweetAlert2 n√£o estiver dispon√≠vel
            alert(gameRules);
        }
    });
    // Sistema de Progresso (melhorado)
    const userProgress = {
        level: 1,
        completedRecipes: 3,
        achievements: [
            { name: 'Iniciante', icon: 'bi-emoji-smile', color: 'primary' },
            { name: '5 Receitas', icon: 'bi-book', color: 'success' },
            { name: 'Chef Novato', icon: 'bi-award', color: 'warning' }
        ],
        progress: 25
    };

    const updateProgress = () => {
        const progressBar = document.getElementById('mainProgress');
        progressBar.style.width = `${userProgress.progress}%`;
        progressBar.textContent = `${userProgress.progress}%`;
        
        // Adiciona classes de cor baseado no progresso
        if (userProgress.progress < 30) {
            progressBar.className = 'progress-bar bg-danger';
        } else if (userProgress.progress < 70) {
            progressBar.className = 'progress-bar bg-warning';
        } else {
            progressBar.className = 'progress-bar bg-success';
        }
        
        document.getElementById('achievements').innerHTML = userProgress.achievements.map(ach => `
            <span class="badge bg-${ach.color} me-2 mb-2">
                <i class="bi ${ach.icon}"></i> ${ach.name}
            </span>
        `).join('');
    };

    // Carregar Receitas (melhorado com fallback)
    const loadRecipes = async () => {
    // Receitas padr√£o (fallback)
    const defaultRecipes = [
        {
            "name": "Arroz Integral com Vegetais",
            "description": "Arroz integral energ√©tico acompanhado de cenoura e ervilhas, rico em fibras e vitaminas.",
            "image": "https://images.unsplash.com/photo-1603133872878-684f208fb84b?ixlib=rb-1.2.1&auto=format&fit=crop&w=600&h=400&q=80",
            "time": 35,
            "servings": 4,
            "difficulty": "F√°cil"
        },
        {
            "name": "Salada Colorida com Molho de Iogurte",
            "description": "Salada fresca com beterraba, pepino e molho cremoso de iogurte e lim√£o, cheia de antioxidantes.",
            "image": "https://images.unsplash.com/photo-1546069901-ba9599a7e63c?ixlib=rb-1.2.1&auto=format&fit=crop&w=600&h=300&q=80",
            "time": 15,
            "servings": 3,
            "difficulty": "F√°cil"
        },
        {
            "name": "Hamb√∫rguer de Feij√£o Preto",
            "description": "Hamb√∫rguer vegetariano proteico feito com feij√£o preto e aveia, assado e sem √≥leo.",
            "image": "https://images.unsplash.com/photo-1596797038530-2c107229654b?ixlib=rb-1.2.1&auto=format&fit=crop&w=600&h=400&q=80",
            "time": 30,
            "servings": 4,
            "difficulty": "M√©dio"
        },
        {
            "name": "Smoothie de Banana com Leite Vegetal",
            "description": "Bebida cremosa com banana, leite de am√™ndoas e chia, fonte de c√°lcio e √¥mega-3.",
            "image": "https://images.unsplash.com/photo-1505576399279-565b52d4ac71?ixlib=rb-1.2.1&auto=format&fit=crop&w=600&h=300&q=80",
            "time": 5,
            "servings": 2,
            "difficulty": "F√°cil"
        },
        {
            "name": "Pasta de Abacate com Torradas Integrais",
            "description": "Pasta cremosa de abacate temperada com lim√£o e azeite, perfeita para lanches r√°pidos e saud√°veis.",
            "image": "https://images.unsplash.com/photo-1559847844-5315695dadae?ixlib=rb-1.2.1&auto=format&fit=crop&w=600&h=300&q=80",
            "time": 10,
            "servings": 2,
            "difficulty": "F√°cil"
        },
        {
            "name": "Cookies de Aveia e Mel",
            "description": "Cookies sem a√ß√∫car refinado, ado√ßados com banana e mel, ideais para um lanche nutritivo.",
            "image": "https://images.unsplash.com/photo-1618923850107-d1a234d7a73a?ixlib=rb-1.2.1&auto=format&fit=crop&w=600&h=300&q=80",
            "time": 25,
            "servings": 12,
            "difficulty": "F√°cil"
        }
    ];

    let recipes = [];
    
    try {
        const response = await fetch('data/recipes.json');
        if (!response.ok) throw new Error('Falha ao carregar receitas');
        recipes = await response.json();
    } catch (error) {
        console.error('Erro ao carregar receitas, usando fallback:', error);
        recipes = defaultRecipes;
    }

    if (!recipes || recipes.length === 0) {
        recipes = defaultRecipes;
    }

    const carouselInner = document.getElementById('carouselItems');
    carouselInner.innerHTML = '';
    
    recipes.forEach((recipe, index) => {
        const item = document.createElement('div');
        item.className = `carousel-item ${index === 0 ? 'active' : ''}`;
        item.innerHTML = `
            <img src="${recipe.image}" class="d-block w-100" alt="${recipe.name}">
            <div class="carousel-caption">
                <h5>${recipe.name}</h5>
                <p>${recipe.description}</p>
                <div class="d-flex justify-content-center gap-3 small mt-2">
                    <span><i class="bi bi-clock"></i> ${recipe.time} min</span>
                    <span><i class="bi bi-people"></i> ${recipe.servings} por√ß√µes</span>
                    <span><i class="bi bi-star"></i> ${recipe.difficulty}</span>
                </div>
            </div>
        `;
        carouselInner.appendChild(item);
    });
    
    if (recipes.length > 1) {
        const indicators = document.createElement('div');
        indicators.className = 'carousel-indicators';
        recipes.forEach((_, i) => {
            const indicator = document.createElement('button');
            indicator.type = 'button';
            indicator.dataset.bsTarget = '#recipeCarousel';
            indicator.dataset.bsSlideTo = i.toString();
            indicator.setAttribute('aria-label', `Slide ${i+1}`);
            if (i === 0) {
                indicator.className = 'active';
                indicator.setAttribute('aria-current', 'true');
            }
            indicators.appendChild(indicator);
        });
        document.getElementById('recipeCarousel').prepend(indicators);
    }

    // Inicializa o carrossel
    if (typeof bootstrap !== 'undefined' && bootstrap.Carousel) {
        new bootstrap.Carousel(document.getElementById('recipeCarousel'), {
            interval: 5000,
            ride: 'carousel'
        });
    }
};

    // Sistema de Quiz (melhorado)
    const quiz = [
        {
        question: "Qual vitamina √© mais importante para a sa√∫de dos ossos?",
        options: ["Vitamina C", "Vitamina D", "Vitamina B12"],
        answer: 1,
        explanation: "A vitamina D ajuda o corpo a absorver c√°lcio, essencial para ossos fortes."
        },
        {
            question: "Qual desses alimentos √© a melhor fonte de prote√≠na?",
            options: ["Ma√ß√£", "Frango", "Arroz branco"],
            answer: 1,
            explanation: "O frango √© rico em prote√≠nas, importantes para o crescimento e reparo dos m√∫sculos."
        },
        {
            question: "Qual mineral previne a anemia e est√° presente no feij√£o?",
            options: ["C√°lcio", "Ferro", "Pot√°ssio"],
            answer: 1,
            explanation: "O ferro ajuda a formar hemoglobina, que transporta oxig√™nio no sangue."
        },
        {
            question: "Qual desses alimentos cont√©m mais fibras?",
            options: ["P√£o branco", "Ma√ß√£ com casca", "Refrigerante"],
            answer: 1,
            explanation: "As fibras ajudam na digest√£o e s√£o encontradas em frutas, verduras e gr√£os integrais."
        },
        {
            question: "Qual bebida √© a melhor para hidrata√ß√£o ap√≥s exerc√≠cios?",
            options: ["Refrigerante", "√Ågua", "Suco artificial"],
            answer: 1,
            explanation: "A √°gua rep√µe os l√≠quidos perdidos sem adicionar a√ß√∫cares desnecess√°rios."
        },
        {
            question: "Qual nutriente fornece energia r√°pida para o corpo?",
            options: ["Prote√≠na", "Carboidrato", "Gordura"],
            answer: 1,
            explanation: "Carboidratos s√£o a principal fonte de energia para atividades f√≠sicas e mentais."
        },
        {
            question: "Qual alimento √© rico em √¥mega-3, bom para o c√©rebro?",
            options: ["Batata frita", "Salm√£o", "Chocolate"],
            answer: 1,
            explanation: "O √¥mega-3, presente em peixes como salm√£o, ajuda no desenvolvimento cerebral."
        },
        {
            question: "Qual fruta √© conhecida por ser rica em pot√°ssio, importante para os m√∫sculos?",
            options: ["Morango", "Banana", "Uva"],
            answer: 1,
            explanation: "O pot√°ssio ajuda no funcionamento muscular e previne c√£ibras."
        }
    ];

    let currentQuestion = 0;
    let score = 0;
    const showQuestion = () => {
        const question = quiz[currentQuestion];
        document.getElementById('quizQuestion').textContent = question.question;
        document.getElementById('quizOptions').innerHTML = question.options.map((option, index) => `
            <button class="btn btn-sm btn-option mb-2" data-answer="${index}">
                ${option}
            </button>
        `).join('');
        
        // Adiciona listeners aos bot√µes de op√ß√£o
        document.querySelectorAll('.btn-option').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const selectedAnswer = parseInt(e.target.dataset.answer);
                const isCorrect = selectedAnswer === question.answer;
                
                // Feedback visual
                e.target.classList.add(isCorrect ? 'bg-success' : 'bg-danger');
                e.target.innerHTML = `${option} <i class="bi ${isCorrect ? 'bi-check' : 'bi-x'}"></i>`;
                
                if (isCorrect) score++;
                
                // Desabilita outros bot√µes
                document.querySelectorAll('.btn-option').forEach(b => {
                    b.disabled = true;
                    if (parseInt(b.dataset.answer) === question.answer) {
                        b.classList.add('bg-success');
                    }
                });
                
                // Mostra explica√ß√£o
                const explanation = document.createElement('div');
                explanation.className = 'alert alert-info mt-3';
                explanation.textContent = question.explanation;
                document.getElementById('quizOptions').appendChild(explanation);
            });
        });
    };

    // Ranking (melhorado)
    const rankingData = [
        { name: "Chef Master", score: 1850, avatar: "bi-trophy-fill" },
        { name: "Nutri Expert", score: 1620, avatar: "bi-egg-fill" },
        { name: "Voc√™", score: 900, avatar: "bi-person-fill" },
        { name: "Aprendiz", score: 750, avatar: "bi-emoji-smile" },
        { name: "Iniciante", score: 450, avatar: "bi-emoji-neutral" }
    ];

    const updateRanking = () => {
        document.getElementById('rankingList').innerHTML = rankingData.map((player, index) => `
            <li class="list-group-item d-flex justify-content-between align-items-center ${player.name === "Voc√™" ? 'active' : ''}">
                <div class="d-flex align-items-center">
                    <span class="badge bg-${index === 0 ? 'warning' : 'secondary'} me-3">
                        ${index + 1}
                    </span>
                    <i class="bi ${player.avatar} me-2"></i>
                    <span>${player.name}</span>
                </div>
                <span class="badge bg-primary rounded-pill">${player.score} pts</span>
            </li>
        `).join('');
    };

    // Event Listeners (melhorado)
    document.getElementById('nextQuestion')?.addEventListener('click', () => {
        currentQuestion = (currentQuestion + 1) % quiz.length;
        showQuestion();
    });

     document.getElementById('loginBtn')?.addEventListener('click', () => {
        // Abre o modal de login
        const loginModal = new bootstrap.Modal(document.getElementById('loginModal'));
        loginModal.show();
    });

    // Inicializa√ß√£o (melhorada)
    const init = () => {
        setupPyramid(); // Adiciona a pir√¢mide alimentar
        updateProgress();
        loadRecipes();
        showQuestion();
        updateRanking();
        
        // Adiciona efeito de digita√ß√£o ao t√≠tulo
        const title = document.querySelector('.glass h1');
        if (title) {
            const text = title.textContent;
            title.textContent = '';
            text.split('').forEach((char, i) => {
                setTimeout(() => {
                    title.textContent += char;
                }, i * 100);
            });
        }
    };

    init();
});